 // Marginally faster than separately looping through all agents for each behavior, try something else
    public void efficientFlock(ArrayList<Agent> agents) {
        double desiredSeparation = this.r * 2;
        Vector sepSum = new Vector();
        Vector aligSum = new Vector();
        Vector cohSum = new Vector();
        
        int counter = 0;
        int cohCounter = 0;
        
        for (Agent other : agents) {
            double dist = this.position.distance(other.getPosition());
            //Separation
            if ((dist > 0) && (dist < desiredSeparation)) {
                Vector offset = new Vector().sub(this.position, other.getPosition());
                offset.normalize();
                offset.div(dist);
                sepSum.add(offset);
                counter++;
            }
            if ((dist > 0) && (dist < this.slowingDistance)) {
                aligSum.add(other.getVelocity());
                
                cohSum.add(other.getPosition());
                counter++;
                cohCounter++;
            }
        }
        
        if (counter > 0) {
            sepSum.setMagnitude(this.maxSpeed);
            
            // Implement Reynolds: Steering = Desired - Velocity
            Vector sepForce = new Vector().sub(sepSum, this.velocity);
            sepForce.limit(this.maxForce);
            
            aligSum.setMagnitude(this.maxSpeed);
            Vector aligForce = new Vector().sub(aligSum, this.velocity);
            aligForce.limit(this.maxForce);
            
            cohSum.div(cohCounter);
            Vector cohForce = seek(cohSum);
            
            // Combine forces
            
            sepForce.mult(1.5);
            aligForce.mult(1.0);
            cohForce.mult(1.0);
            
            this.applyForce(sepForce);
            this.applyForce(aligForce);
            this.applyForce(cohForce);
        }
        
    }

________________________________________________________________________________________________

private double slowingDistance; // Radius around target within which maxSpeed is scaled

// Method to calculate and apply a correcting steering force towards a target point
    // and scale its speed by how close it it from the target, in the end stopping if at target
    // correction = desired force minus velocity
    public void arrive(Vector target) {
        // Distance to target
        Vector desired = new Vector().sub(target, this.position);
        double distance = desired.magnitude();

        // Reynolds way to calculate slowingSpeed
        double rampedSpeed = this.maxSpeed * (distance / this.slowingDistance);
        double clippedSpeed = MathWrapper.min(rampedSpeed, this.maxSpeed);

        // Set magnitude = desired speed
        desired.setMagnitude(clippedSpeed);

        // correction = desired force minus velocity
        Vector correctionForce = new Vector().sub(desired, this.velocity);
        correctionForce.limit(this.maxForce);

        this.applyForce(correctionForce);
    }


________________________________________________________________________________________________
private double wanderTheta; // Direction for wandering 

    // Method to create a wander circle in front of agent on which a random point is created to be 
    // the target of seek() making the agent wander randomly
    public Vector wander() {
        double wanderR = 30;    // Radius for "wandering strength circle"
        double wanderD = 60;   // Circle distance from wanderer
        double change = 0.4;

        //Randomly change wanderTheta for pseudorandom choice of direction
        this.wanderTheta = MathWrapper.round(MathWrapper.random() * 2 * change) - change;

        // Calculate the position on the wander circle to which to steer towards
        Vector circlePosition = new Vector(this.velocity.getX(), this.velocity.getY());
        circlePosition.setMagnitude(wanderD);
        circlePosition.add(this.position);  // relative to this agents position

        double head = this.velocity.heading(); // Heading to offset with wanderTheta

        Vector circleOffset = new Vector(wanderR * MathWrapper.cos(this.wanderTheta + head), wanderR * MathWrapper.sin(this.wanderTheta + head));
        Vector target = new Vector().add(circlePosition, circleOffset);

        return this.seek(target);
    }

________________________________________________________________________________________________


//    /**
//     * https://math.stackexchange.com/questions/377169/calculating-a-value-inside-one-range-to-a-value-of-another-range
//     * MAP VALUE IN RANGE [a,b] TO OTHER RANGE [c,d]
//     *
//     */
//    public double affineMap(double x, double a, double b, double c, double d) {
//        if (b - a == 0) {
//            return 0;
//        } else {
//            double y = (x - a) * ((d - c) / (b - a)) + c;
//            return y;
//        }
//    }